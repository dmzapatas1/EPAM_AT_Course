{
  "stats": {
    "suites": 1,
    "tests": 12,
    "passes": 12,
    "pending": 0,
    "failures": 0,
    "start": "2023-10-17T22:29:20.906Z",
    "end": "2023-10-17T22:29:20.934Z",
    "duration": 28,
    "testsRegistered": 12,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b1e768c4-d2e2-4be1-b45c-897ce6bf8099",
      "title": "",
      "fullFile": "D:\\Documentos\\EPAM\\EPAM_AT_Course\\test\\numbers-validator\\isNumberEven.spec.js",
      "file": "\\test\\numbers-validator\\isNumberEven.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "7022334c-2a20-4dd6-803c-217dd5808d6e",
          "title": "isNumberEven positive test",
          "fullFile": "D:\\Documentos\\EPAM\\EPAM_AT_Course\\test\\numbers-validator\\isNumberEven.spec.js",
          "file": "\\test\\numbers-validator\\isNumberEven.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isNumberEven positive test\"",
              "fullTitle": "isNumberEven positive test \"before each\" hook in \"isNumberEven positive test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "2cf57b8a-adc3-4bfd-8243-1daf051d6ad0",
              "parentUUID": "7022334c-2a20-4dd6-803c-217dd5808d6e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isNumberEven positive test\"",
              "fullTitle": "isNumberEven positive test \"after each\" hook in \"isNumberEven positive test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "7d4e58d7-5a88-403a-ae76-1af4e0db3c6c",
              "parentUUID": "7022334c-2a20-4dd6-803c-217dd5808d6e",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return true when provided with an even number",
              "fullTitle": "isNumberEven positive test should return true when provided with an even number",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(4);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "a4134de5-c2eb-4a1d-b49d-f2475072e538",
              "parentUUID": "7022334c-2a20-4dd6-803c-217dd5808d6e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false when provided with an even number",
              "fullTitle": "isNumberEven positive test should return false when provided with an even number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(5);\nexpect(validationResults).to.be.equal(false);",
              "err": {},
              "uuid": "f656d56b-24bf-49c3-9e54-84913b71a930",
              "parentUUID": "7022334c-2a20-4dd6-803c-217dd5808d6e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided a string",
              "fullTitle": "isNumberEven positive test should throw an error when provided a string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven('4');\n}).to.throw('[4] is not of type \"Number\" it is of type \"string\"');",
              "err": {},
              "uuid": "f850299c-9f79-4a5a-b8c7-3af68b2bf0e7",
              "parentUUID": "7022334c-2a20-4dd6-803c-217dd5808d6e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an array of even numbers",
              "fullTitle": "isNumberEven positive test should return an array of even numbers",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.getEvenNumbersFromArray([2, 4, 6]);\nexpect(validationResults).to.deep.equal([2, 4, 6]);",
              "err": {},
              "uuid": "63f82dd2-e0a6-42f2-8b57-92a36bf8fc78",
              "parentUUID": "7022334c-2a20-4dd6-803c-217dd5808d6e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "No even numbers inside array",
              "fullTitle": "isNumberEven positive test No even numbers inside array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.getEvenNumbersFromArray([7, 9]);\nexpect(validationResults).to.deep.equal([]);",
              "err": {},
              "uuid": "ab000807-4fcc-4b9f-8c03-ac8f64d28039",
              "parentUUID": "7022334c-2a20-4dd6-803c-217dd5808d6e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided an array without numbers",
              "fullTitle": "isNumberEven positive test should throw an error when provided an array without numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.getEvenNumbersFromArray([4, 's']);\n}).to.throw('[4,s] is not an array of \"Numbers\"');",
              "err": {},
              "uuid": "c132f1bf-96cd-4716-a6c0-5a576a46cd3f",
              "parentUUID": "7022334c-2a20-4dd6-803c-217dd5808d6e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true if all are numbers",
              "fullTitle": "isNumberEven positive test should return true if all are numbers",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isAllNumbers([7, 9]);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "8d95b1df-8034-4d39-8818-80fb6e438c7a",
              "parentUUID": "7022334c-2a20-4dd6-803c-217dd5808d6e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if is not an array",
              "fullTitle": "isNumberEven positive test should return false if is not an array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isAllNumbers([4, 's']);\nexpect(validationResults).to.be.equal(false);",
              "err": {},
              "uuid": "59a2b66e-22d4-4880-a14f-251b580a9b7c",
              "parentUUID": "7022334c-2a20-4dd6-803c-217dd5808d6e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided an array whet not all are numbers",
              "fullTitle": "isNumberEven positive test should throw an error when provided an array whet not all are numbers",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isAllNumbers('s');\n}).to.throw('[s] is not an array');",
              "err": {},
              "uuid": "6e0af46e-755e-4529-ac06-621170310e03",
              "parentUUID": "7022334c-2a20-4dd6-803c-217dd5808d6e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true if is an integer",
              "fullTitle": "isNumberEven positive test should return true if is an integer",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isInteger(7);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "735cb375-644f-4c31-b8e1-c5da54a27063",
              "parentUUID": "7022334c-2a20-4dd6-803c-217dd5808d6e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if is not an integer",
              "fullTitle": "isNumberEven positive test should return false if is not an integer",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isInteger(7.5);\nexpect(validationResults).to.be.equal(false);",
              "err": {},
              "uuid": "00392e1e-131b-4654-9c0c-7ff2c0b0b126",
              "parentUUID": "7022334c-2a20-4dd6-803c-217dd5808d6e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when is not a number",
              "fullTitle": "isNumberEven positive test should throw an error when is not a number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isInteger('s');\n}).to.throw('[s] is not a number');",
              "err": {},
              "uuid": "de5c5295-2a71-4936-89a2-cd41630623e9",
              "parentUUID": "7022334c-2a20-4dd6-803c-217dd5808d6e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a4134de5-c2eb-4a1d-b49d-f2475072e538",
            "f656d56b-24bf-49c3-9e54-84913b71a930",
            "f850299c-9f79-4a5a-b8c7-3af68b2bf0e7",
            "63f82dd2-e0a6-42f2-8b57-92a36bf8fc78",
            "ab000807-4fcc-4b9f-8c03-ac8f64d28039",
            "c132f1bf-96cd-4716-a6c0-5a576a46cd3f",
            "8d95b1df-8034-4d39-8818-80fb6e438c7a",
            "59a2b66e-22d4-4880-a14f-251b580a9b7c",
            "6e0af46e-755e-4529-ac06-621170310e03",
            "735cb375-644f-4c31-b8e1-c5da54a27063",
            "00392e1e-131b-4654-9c0c-7ff2c0b0b126",
            "de5c5295-2a71-4936-89a2-cd41630623e9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}